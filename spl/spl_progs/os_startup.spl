load(5,19); // File Allocation Table
load(6,20); // Disk Free List
load(7,1); // Exception Handler
load(8,2);
load(9,3); // Timer Interrupt Routine
load(10,4);
load(11,5); // Interrupt 1 Routine
load(12,6);
load(13,7); // Interrupt 2 Routine
load(14,8);
load(15,9); // Interrupt 3 Routine
load(16,10);
load(17,11); // Interrupt 4 Routine
load(18,12);
load(19,13); // Interrupt 5 Routine
load(20,14);
load(21,15); // Interrupt 6 Routine
load(22,16);
load(23,17); // Interrupt 7 Routine
load(24,18);

alias counter S0;

counter = 0;
while (counter <= 25) do
	[MEM_LIST + counter] = 1;
	counter=counter+1;
endwhile;
while (counter < 63) do
	[MEM_LIST + counter] = 0;
	counter=counter+1;
endwhile;
[MEM_LIST + 63]=1;
			
counter = 0;
while (counter <  128) do
	[FILE_TABLE + counter + 0] = -1;
	[FILE_TABLE + counter + 1] =  0;
	counter=counter+2;
endwhile;

counter = 0;
while (counter < 32) do
	[READY_LIST + 32*counter + 1] = 0;
	counter=counter+1;
endwhile;

//new data structure
counter=0;
while (counter < 256) do
	[63*512 + counter]=-1;
	counter=counter+1;
endwhile;
[63*512 + 256]=0;

counter = 448;
while (counter < 512) do
	[DISK_LIST + counter]=0;
	counter=counter+1;
endwhile;
store(6,20);

[READY_LIST + 0] = 0; // Sets the entry for PID as 0 

PTBR = 1024;
PTLR = 4;

[PTBR + 0] = 21;
[PTBR + 1] = "00";
[PTBR + 2] = 22;
[PTBR + 3] = "00";
[PTBR + 4] = 23;
[PTBR + 5] = "00";
[PTBR + 6] = 25;
[PTBR + 7] = "01";

counter=15;
while (counter < 31) do
	[READY_LIST + counter] = -1;
	counter=counter+1;
endwhile;
[READY_LIST + 31]=0;

[READY_LIST + 1] = 2; // Sets the entry for STATE as Running 
SP = 3*512;
[25*512] = 0; // Set up the IP value for INIT in the stack

ireturn;
