alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias currentPID S2;
currentPID=(PTBR - 1024)/8;

alias currentPCB S3;
currentPCB=READY_LIST + 32*currentPID;

if ((sysCallNo == 10) || (sysCallNo == 14)) then
	alias newPID S4;
	newPID = 0;
	alias newPCB S5;
	while(newPID < 32) do
		newPCB = READY_LIST + 32*newPID;
		if ([newPCB + 1] == (100 + currentPID)) then
			[newPCB + 1]=1;
		endif;
		newPID = newPID + 1;
	endwhile;
endif;

if (sysCallNo == 10) then
	currentPID=0;
	while(currentPID < 32) do
		currentPCB=READY_LIST + 32*currentPID;
		if ([currentPCB + 1] == 1) then
			break;
		endif;
		currentPID=currentPID+1;
	endwhile;

	if (currentPID == 32) then
		halt;
	endif;

	currentPID=(PTBR - 1024)/8;
	currentPCB=READY_LIST + 32*currentPID;

	alias fileDescriptor S6;
	alias FileIndex S7;
	fileDescriptor=0;
	while(fileDescriptor < 8) do
		FileIndex=[currentPCB + 2*fileDescriptor + 15];

		if (FileIndex == -1) then
			fileDescriptor=fileDescriptor+1;
			continue;
		endif;

		[FILE_TABLE + 2*FileIndex + 1]=[FILE_TABLE + 2*FileIndex + 1]-1;
		if ([FILE_TABLE + 2*FileIndex + 1] == 0) then
			[FILE_TABLE + 2*FileIndex]=-1;
		endif;

		[currentPCB + 2*fileDescriptor + 15]=-1;
		[currentPCB + 2*fileDescriptor + 16]=-1;
		fileDescriptor=fileDescriptor+1;
	endwhile;

	[currentPCB + 1]=0;

	alias counter S8;
	alias DataBlock S9;
	counter=0;
	while(counter < PTLR) do
		DataBlock=[PTBR + 2*counter];
		if (([PTBR + 2*counter + 1] == "01") || ([PTBR + 2*counter + 1] == "11")) then
			[MEM_LIST + DataBlock]=[MEM_LIST + DataBlock]-1;
		else
			if (DataBlock >= 448) then
				[DISK_LIST + DataBlock]=[DISK_LIST + DataBlock]-1;
				store(6,20);
			endif;
		endif;
		[PTBR + 2*counter]=-1;
		[PTBR + 2*counter + 1]="00";
		counter=counter+1;
	endwhile;
endif;

if (sysCallNo == 13) then
	alias WaitingPID S4;
	WaitingPID=[physicalSP - 3];

	alias WaitingPCB S5;
	WaitingPCB = READY_LIST + 32*WaitingPID;

	if ((WaitingPID == currentPID) || ([WaitingPCB + 1] == 0)) then
		[physicalSP - 2]=-1;
		ireturn;
	endif;

	[currentPCB + 1] = 100 + WaitingPID;
	[currentPCB + 2] = BP;
	[currentPCB + 3] = SP-1;
	[currentPCB + 4] = [physicalSP];
	[currentPCB + 5] = PTBR;
	[currentPCB + 6] = PTLR;
	[currentPCB + 7] = R0;
	[currentPCB + 8] = R1;
	[currentPCB + 9] = R2;
	[currentPCB + 10] = R3;
	[currentPCB + 11] = R4;
	[currentPCB + 12] = R5;
	[currentPCB + 13] = R6;
	[currentPCB + 14] = R7;

	[physicalSP - 2]=0;
endif;

if (sysCallNo == 14) then
	[physicalSP - 2]=0;
endif;

if ((sysCallNo == 10) || (sysCallNo == 13)) then
	alias newPID S4;
	newPID = currentPID + 1;
	alias newPCB S5;
	while(1) do
		if (newPID == 32) then
			newPID=0;
		endif;
		newPCB = READY_LIST + 32*newPID;
		if ([newPCB + 1] == 1) then
			break;
		endif;
		newPID = newPID+1;
	endwhile;

	alias counter S6;
	alias DataBlock S7;
	alias freePageIndex S8;
	alias newPTBR S9;
	newPTBR=[newPCB + 5];
	if ([newPTBR + 6] >= 448) then
		freePageIndex=0;
		while(freePageIndex < 64) do
			if ([MEM_LIST + freePageIndex] == 0) then
				load(freePageIndex,[newPTBR + 6]);
				[DISK_LIST + [newPTBR + 6]]=0;
				[MEM_LIST + freePageIndex]=1;
				store(6,20);
				[newPTBR + 6]=freePageIndex;
				[newPTBR + 7]="11";
				break;
			endif;
			freePageIndex=freePageIndex+1;
		endwhile;

		if (freePageIndex == 64) then
			load(1,[newPTBR + 6]);
			store([PTBR + 6],[newPTBR + 6]);

			counter=0;
			while(counter < 512) do
				[[PTBR + 6]*512 + counter]=[SCRATCHPAD + counter];
				counter=counter+1;
			endwhile;

			freePageIndex=[PTBR + 6];
			[PTBR + 6]=[newPTBR + 6];
			[PTBR + 7]="00";
			[newPTBR + 6]=freePageIndex;
			[newPTBR + 7]="11";
		endif;
	endif;

	BP = [newPCB + 2];
	SP = [newPCB + 3];
	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];
	R0 = [newPCB + 7];
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];

	SP = SP + 1;
	physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);
	[physicalSP] = [newPCB + 4];
	[newPCB + 1] = 2;
endif;

ireturn;
